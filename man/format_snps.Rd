% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utility_functions.R
\name{format_snps}
\alias{format_snps}
\title{Re-format genomic data.}
\usage{
format_snps(x, ecs, output = 1, input_form = "NN", miss = "N", pop = 1,
  n_samp = NA, interp_miss = T, lnames = NULL, outfile = FALSE)
}
\arguments{
\item{x}{data.frame. Input data, in any of the above listed input formats.}

\item{ecs}{Integer. Number of extra metadata columns at the start of x.}

\item{output}{Integer 1-7. Which of the above output formats should be used?}

\item{input_form}{Character, default "NN". Which of the above input formats should be used (e.g. "NN", "msat_2")?}

\item{miss}{Character, default "N". The coding for missing \emph{alleles} in x (typically "N" or "00").}

\item{pop}{List or integer 1, default 1. Population information for individuals. Format is as produced by: list(c("North", "South", "East", "West"), c(10,20,30,40)). First vector is names of pops, second vector is the count of each pop. Input data MUST be in the same order as this list. If 1, assumes one population. For output options 1 and 5.}

\item{n_samp}{Integer or numeric vector, default NA. For output option 3. How many random loci should be selected? Can either be an integer or a numeric vector of loci to use.}

\item{interp_miss}{boolean, default TRUE. For output option 7. Should missing data be interpolated? Needed for PCA, ect.}

\item{lnames}{character vector, default NULL. For output option 7, optional vector of locus names by which to name output columns. If not provided, will use 1:nrow(x).}

\item{outfile}{character vector, default FALSE. If provided, the path to the output file to write to.}
}
\value{
A data.frame in the specified format.
}
\description{
\code{format_snps} reformats SNP data into a range of different possible formats for use in snpR functions and elsewhere. Supports microsatellite data for conversion to a few formats as well.
}
\details{
Format options:
\enumerate{
   \item Allele count format: allele counts tabulated for all samples or within populations.
   \item genepop format: genotypes stored as four numeric characters (e.g. "0101", "0204"), transposed, and formatted for genepop. Rownames are individual IDs in genepop format, colnames are SNP ids, matching the first metadata column in input.
   \item structure format: two lines per individual: allele calls stored as single character numeric (e.g. "1", "2"). Allele calls per individual stored on two subsequent lines.
   \item Numeric genotype tab format: genotypes stored as four numeric characters (e.g. "0101", "0204").
   \item Migrate-n hapmap: allele counts tabulated within populations, in migrate-n hapmap format. Since this migrate-n implementation is iffy, this probably shouldn't be used much.
   \item Character genotype tab format: genotypes stored as actual base calls (e.g. "AA", "CT").
   \item Allele presence/absence format: presence or absence of each possible allele at each possible genotype noted. Interpolation possible, with missing data substituted with allele freqency in all samples or each population.
}

Example datasets in each format are available in \code{\link{stickFORMATs}} in elements named o1-7 for output options 1 to 7, respectively.

Input formats: For now, all input formats require at least two metadata columns.
\itemize{
   \item{NN: }{SNP genotypes stored as actual base calls (e.g. "AA", "CT").}
   \item{0000: }{SNP genotypes stored as four numeric characters (e.g. "0101", "0204").}
   \item{msat_2: }{Microsatellite genotypes stored as four numeric characters (e.g. "0101", "2740").}
   \item{msat_3: }{Microsatellite genotypes stored as six numeric characters (e.g. "120123", "233235").}
   \item{snp_tab: }{SNP genotypes stored with genotypes in each cell, but only a single nucleotide noted if homozygote and two nucleotides seperated by a space if heterozygote (e.g. "T", "T G").}
}

Currently, msat_2 and msat_3 only support conversion to output option 7. 2, 3, and 4 are forthcoming.
}
\examples{
#output option 1 with pops:
pops <- table(substr(colnames(stickSNPs[,4:ncol(stickSNPs)]), 1, 3))
l <- list(c(names(pops)), as.numeric(pops))
format_snps(stickSNPs, 3, 1, pop = l)

#option 2:
format_snps(stickSNPs, 3, 2)

#option 3, subsetting out 100 random alleles:
format_snps(stickSNPs, 3, 3, n_samp = 100)

#option 3, subseting out the first 100 alleles:
format_snps(stickSNPs, 3, 3, n_samp = 1:100)

#option 4:
format_snps(stickSNPs, 3, 4)

#option 5:
pops <- table(substr(colnames(stickSNPs[,4:ncol(stickSNPs)]), 1, 3))
l <- list(c(names(pops)), as.numeric(pops))
format_snps(stickSNPs, 3, 5, pop = l)

#option 6:
num <- format_snps(stickSNPs, 3, 4)
format_snps(num, 3, 6, input_form = "0000", miss = "00")

#option 7, SNP data:
format_snps(stickSNPs, 3, 7)

#option 7, 3 character microsat data (2 character is very similar):
format_snps(sthMSATS[seq(1, 13, by = 4),], 3, 7, input_form = "msat_3", miss = "000")


}
